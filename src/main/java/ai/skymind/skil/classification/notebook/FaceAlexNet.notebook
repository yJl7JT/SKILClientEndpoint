
import org.apache.commons.io.FilenameUtils
import org.datavec.api.io.filters.BalancedPathFilter
import org.datavec.api.io.labels.ParentPathLabelGenerator
import org.datavec.api.split.FileSplit
import org.datavec.api.split.InputSplit
import org.datavec.image.loader.NativeImageLoader
import org.datavec.image.recordreader.ImageRecordReader
import org.datavec.image.transform.FlipImageTransform
import org.datavec.image.transform.ImageTransform
import org.datavec.image.transform.PipelineImageTransform
import org.datavec.image.transform.WarpImageTransform
import org.deeplearning4j.api.storage.StatsStorage
import org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator
import org.deeplearning4j.eval.Evaluation
import org.deeplearning4j.nn.conf.GradientNormalization
import org.deeplearning4j.nn.conf.MultiLayerConfiguration
import org.deeplearning4j.nn.conf.NeuralNetConfiguration
import org.deeplearning4j.nn.conf.distribution.Distribution
import org.deeplearning4j.nn.conf.distribution.GaussianDistribution
import org.deeplearning4j.nn.conf.distribution.NormalDistribution
import org.deeplearning4j.nn.conf.inputs.InputType
import org.deeplearning4j.nn.conf.inputs.InvalidInputTypeException
import org.deeplearning4j.nn.conf.layers._
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork
import org.deeplearning4j.nn.weights.WeightInit
import org.deeplearning4j.optimize.listeners.ScoreIterationListener
import org.deeplearning4j.ui.api.UIServer
import org.deeplearning4j.ui.stats.StatsListener
import org.deeplearning4j.ui.storage.InMemoryStatsStorage
import org.deeplearning4j.util.ModelSerializer
import org.nd4j.linalg.activations.Activation
import org.nd4j.linalg.dataset.DataSet
import org.nd4j.linalg.dataset.api.iterator.DataSetIterator
import org.nd4j.linalg.dataset.api.preprocessor.DataNormalization
import org.nd4j.linalg.dataset.api.preprocessor.ImagePreProcessingScaler
import org.nd4j.linalg.learning.config.Nesterovs
import org.nd4j.linalg.lossfunctions.LossFunctions
import org.nd4j.linalg.primitives.Pair
import org.nd4j.linalg.schedule.ScheduleType
import org.nd4j.linalg.schedule.StepSchedule
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import java.io.File
import java.util.Arrays
import java.util.List
import java.util.Random
import java.lang.Math

val height: Int = 100
val width: Int = 100
val channels: Int = 1
val batchSize: Int = 20
val seed: Long = 42
val rng: Random = new Random(seed)
val epochs: Int = 180
val splitTrainTest: Double = 0.8
val save: Boolean = false
val maxPathsPerLabel: Int = 18
val modelType: String = "AlexNet"
var numLabels: Int = 0
  
def getData(path: String,labelMaker: ParentPathLabelGenerator):InputSplit = {
	val mainPath: File = new File(path)
	//    val mainPath: File = new File("C:\\Users\\п║ки\\Desktop\\photo")
	val fileSplit: FileSplit = new FileSplit(mainPath, NativeImageLoader.ALLOWED_FORMATS, rng)
	val numExamples: Int = Math.toIntExact(fileSplit.length)
	numLabels = fileSplit.getRootDir.listFiles().length
	val pathFilter: BalancedPathFilter = new BalancedPathFilter(rng, labelMaker, numExamples, numLabels, maxPathsPerLabel)
	val inputSplit: Array[InputSplit] = fileSplit.sample(pathFilter, 1)
	inputSplit(0)
}

print("Load data....")
val labelMaker: ParentPathLabelGenerator = new ParentPathLabelGenerator
val trainData:InputSplit = getData("/home/datasets/pepperFaceRecognize1/train/",labelMaker)
val testData:InputSplit =  getData("/home/datasets/pepperFaceRecognize1/test/",labelMaker)

def fullyConnected(name: String, out: Int, bias: Double, dropOut: Double, dist: Distribution): DenseLayer = {
	new DenseLayer.Builder().name(name).nOut(out).biasInit(bias).dropOut(dropOut).dist(dist).build
}
def conv3x3(name: String, out: Int, bias: Double): ConvolutionLayer = {
	new ConvolutionLayer.Builder(Array[Int](3, 3), Array[Int](1, 1), Array[Int](1, 1)).name(name).nOut(out).biasInit(bias).build
}
def maxPool(name: String, kernel: Array[Int]): SubsamplingLayer = {
	new SubsamplingLayer.Builder(kernel, Array[Int](2, 2)).name(name).build
}
def conv5x5(name: String, out: Int, stride: Array[Int], pad: Array[Int], bias: Double): ConvolutionLayer = {
	new ConvolutionLayer.Builder(Array[Int](5, 5), stride, pad).name(name).nOut(out).biasInit(bias).build
}
def convInit(name: String, in: Int, out: Int, kernel: Array[Int], stride: Array[Int], pad: Array[Int], bias: Double): ConvolutionLayer = {
	new ConvolutionLayer.Builder(kernel, stride, pad).name(name).nIn(in).nOut(out).biasInit(bias).build
}


def alexnetModel: MultiLayerNetwork = {
    val nonZeroBias: Double = 1
    val dropOut: Double = 0.5
    val conf: MultiLayerConfiguration = new NeuralNetConfiguration.Builder()
      .seed(seed)
      .weightInit(WeightInit.DISTRIBUTION)
      .dist(new NormalDistribution(0.0, 0.01))
      .activation(Activation.RELU)
      .updater(new Nesterovs(new StepSchedule(ScheduleType.ITERATION, 1e-2, 0.1, 100000), 0.9))
      .biasUpdater(new Nesterovs(new StepSchedule(ScheduleType.ITERATION, 2e-2, 0.1, 100000), 0.9))
      .gradientNormalization(GradientNormalization.RenormalizeL2PerLayer)
      .l2(5 * 1e-4)
      .list
      .layer(0, convInit("cnn1", channels, 96, Array[Int](11, 11), Array[Int](4, 4), Array[Int](3, 3), 0))
      .layer(1, new LocalResponseNormalization.Builder().name("lrn1").build)
      .layer(2, maxPool("maxpool1", Array[Int](3, 3)))
      .layer(3, conv5x5("cnn2", 256, Array[Int](1, 1), Array[Int](2, 2), nonZeroBias))
      .layer(4, new LocalResponseNormalization.Builder().name("lrn2").build)
      .layer(5, maxPool("maxpool2", Array[Int](3, 3)))
      .layer(6, conv3x3("cnn3", 384, 0))
      .layer(7, conv3x3("cnn4", 384, nonZeroBias))
      .layer(8, conv3x3("cnn5", 256, nonZeroBias))
      .layer(9, maxPool("maxpool3", Array[Int](3, 3)))
      .layer(10, fullyConnected("ffn1", 4096, nonZeroBias, dropOut, new GaussianDistribution(0, 0.005)))
      .layer(11, fullyConnected("ffn2", 4096, nonZeroBias, dropOut, new GaussianDistribution(0, 0.005)))
      .layer(12, new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)
        .name("output").nOut(numLabels).activation(Activation.SOFTMAX).build)
      .backprop(true).pretrain(false)
      .setInputType(InputType.convolutional(height, width, channels))
      .build
    new MultiLayerNetwork(conf)
  }
  

 print("Build model....")
    var network: MultiLayerNetwork = null
    modelType match {
//      case "LeNet" => network=lenetModel
      case "AlexNet" => network=alexnetModel
//      case "custom" => network=customModel
      case _ =>
        throw new InvalidInputTypeException("Incorrect model provided.")
    }
    network.init
    val uiServer: UIServer = UIServer.getInstance
    val statsStorage: StatsStorage = new InMemoryStatsStorage
    uiServer.attach(statsStorage)
    network.setListeners(new StatsListener(statsStorage), new ScoreIterationListener(1))
	
    val recordReader: ImageRecordReader = new ImageRecordReader(height, width, channels, labelMaker)
    var dataIter: DataSetIterator = null

    val scaler: DataNormalization = new ImagePreProcessingScaler(0, 1)
    print("Train model....")
    recordReader.initialize(trainData, null)
    dataIter = new RecordReaderDataSetIterator(recordReader, batchSize, 1, numLabels)
    scaler.fit(dataIter)
    dataIter.setPreProcessor(scaler)
    network.fit(dataIter, epochs)
    val TrainEval: Evaluation = network.evaluate(dataIter)
    print(TrainEval.stats(true))
	
print("Save model....")
ModelSerializer.writeModel(network, "/var/skil/storage/face.fz1.zip", true)