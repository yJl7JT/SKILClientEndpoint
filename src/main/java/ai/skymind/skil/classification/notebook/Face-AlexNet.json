{"paragraphs":[{"text":"\r\nimport org.apache.commons.io.FilenameUtils\r\nimport org.datavec.api.io.filters.BalancedPathFilter\r\nimport org.datavec.api.io.labels.ParentPathLabelGenerator\r\nimport org.datavec.api.split.FileSplit\r\nimport org.datavec.api.split.InputSplit\r\nimport org.datavec.image.loader.NativeImageLoader\r\nimport org.datavec.image.recordreader.ImageRecordReader\r\nimport org.datavec.image.transform.FlipImageTransform\r\nimport org.datavec.image.transform.ImageTransform\r\nimport org.datavec.image.transform.PipelineImageTransform\r\nimport org.datavec.image.transform.WarpImageTransform\r\nimport org.deeplearning4j.api.storage.StatsStorage\r\nimport org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator\r\nimport org.deeplearning4j.eval.Evaluation\r\nimport org.deeplearning4j.nn.conf.GradientNormalization\r\nimport org.deeplearning4j.nn.conf.MultiLayerConfiguration\r\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\r\nimport org.deeplearning4j.nn.conf.distribution.Distribution\r\nimport org.deeplearning4j.nn.conf.distribution.GaussianDistribution\r\nimport org.deeplearning4j.nn.conf.distribution.NormalDistribution\r\nimport org.deeplearning4j.nn.conf.inputs.InputType\r\nimport org.deeplearning4j.nn.conf.inputs.InvalidInputTypeException\r\nimport org.deeplearning4j.nn.conf.layers._\r\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\r\nimport org.deeplearning4j.nn.weights.WeightInit\r\nimport org.deeplearning4j.optimize.listeners.ScoreIterationListener\r\nimport org.deeplearning4j.ui.api.UIServer\r\nimport org.deeplearning4j.ui.stats.StatsListener\r\nimport org.deeplearning4j.ui.storage.InMemoryStatsStorage\r\nimport org.deeplearning4j.util.ModelSerializer\r\nimport org.nd4j.linalg.activations.Activation\r\nimport org.nd4j.linalg.dataset.DataSet\r\nimport org.nd4j.linalg.dataset.api.iterator.DataSetIterator\r\nimport org.nd4j.linalg.dataset.api.preprocessor.DataNormalization\r\nimport org.nd4j.linalg.dataset.api.preprocessor.ImagePreProcessingScaler\r\nimport org.nd4j.linalg.learning.config.Nesterovs\r\nimport org.nd4j.linalg.lossfunctions.LossFunctions\r\nimport org.nd4j.linalg.primitives.Pair\r\nimport org.nd4j.linalg.schedule.ScheduleType\r\nimport org.nd4j.linalg.schedule.StepSchedule\r\nimport org.slf4j.Logger\r\nimport org.slf4j.LoggerFactory\r\nimport java.io.File\r\nimport java.util.Arrays\r\nimport java.util.List\r\nimport java.util.Random\r\nimport java.lang.Math\r\n","user":"admin","dateUpdated":"2019-05-30T09:19:38+0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.commons.io.FilenameUtils\nimport org.datavec.api.io.filters.BalancedPathFilter\nimport org.datavec.api.io.labels.ParentPathLabelGenerator\nimport org.datavec.api.split.FileSplit\nimport org.datavec.api.split.InputSplit\nimport org.datavec.image.loader.NativeImageLoader\nimport org.datavec.image.recordreader.ImageRecordReader\nimport org.datavec.image.transform.FlipImageTransform\nimport org.datavec.image.transform.ImageTransform\nimport org.datavec.image.transform.PipelineImageTransform\nimport org.datavec.image.transform.WarpImageTransform\nimport org.deeplearning4j.api.storage.StatsStorage\nimport org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator\nimport org.deeplearning4j.eval.Evaluation\nimport org.deeplearning4j.nn.conf.GradientNormalization\nimport org.deeplearning4j.nn.conf.MultiLayerConfiguration\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\nimport org.deeplearning4j.nn.conf.distribution.Distribution\nimport org.deeplearning4j.nn.conf.distribution.GaussianDistribution\nimport org.deeplearning4j.nn.conf.distribution.NormalDistribution\nimport org.deeplearning4j.nn.conf.inputs.InputType\nimport org.deeplearning4j.nn.conf.inputs.InvalidInputTypeException\nimport org.deeplearning4j.nn.conf.layers._\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\nimport org.deeplearning4j.nn.weights.WeightInit\nimport org.deeplearning4j.optimize.listeners.ScoreIterationListener\nimport org.deeplearning4j.ui.api.UIServer\nimport org.deeplearning4j.ui.stats.StatsListener\nimport org.deeplearning4j.ui.storage.InMemoryStatsStorage\nimport org.deeplearning4j.util.ModelSerializer\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.dataset.DataSet\nimport org.nd4j.linalg.dataset.api.iterator.DataSetIterator\nimport org.nd4j.linalg.dataset.api.preprocessor.DataNormalization\nimport org.nd4j.linalg.dataset.api.preprocessor.ImagePreProcessingScaler\nimport org.nd4j.linalg.learning.config.Nesterovs\nimport org.nd4j.linalg.lossfunctions.LossFunctions\nimport org.nd4j.linalg.primitives.Pair\nimport org.nd4j.linalg.schedule.ScheduleType\nimport org.nd4j.linalg.schedule.StepSchedule\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport java.io.File\nimport java.util.Arrays\nimport java.util.List\nimport java.util.Random\nimport java.lang.Math\n"}]},"apps":[],"jobName":"paragraph_1559119749247_-1967125100","id":"20190529-164909_17796759","dateCreated":"2019-05-29T16:49:09+0800","dateStarted":"2019-05-30T09:19:39+0800","dateFinished":"2019-05-30T09:19:56+0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:204"},{"text":"  val height: Int = 100\r\n  val width: Int = 100\r\n  val channels: Int = 1\r\n  val batchSize: Int = 20\r\n  val seed: Long = 42\r\n  val rng: Random = new Random(seed)\r\n  val epochs: Int = 180\r\n  val splitTrainTest: Double = 0.8\r\n  val save: Boolean = false\r\n  val maxPathsPerLabel: Int = 18\r\n  val modelType: String = \"AlexNet\"\r\n  var numLabels: Int = 0\r\n  ","user":"admin","dateUpdated":"2019-05-30T09:19:39+0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"height: Int = 100\nwidth: Int = 100\nchannels: Int = 1\nbatchSize: Int = 20\nseed: Long = 42\nrng: java.util.Random = java.util.Random@4a117800\nepochs: Int = 180\nsplitTrainTest: Double = 0.8\nsave: Boolean = false\nmaxPathsPerLabel: Int = 18\nmodelType: String = AlexNet\nnumLabels: Int = 0\n"}]},"apps":[],"jobName":"paragraph_1559123344411_-1257349867","id":"20190529-174904_1623651295","dateCreated":"2019-05-29T17:49:04+0800","dateStarted":"2019-05-30T09:19:39+0800","dateFinished":"2019-05-30T09:19:57+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:205"},{"text":"  def getData(path: String,labelMaker: ParentPathLabelGenerator):InputSplit = {\r\n    val mainPath: File = new File(path)\r\n    //    val mainPath: File = new File(\"C:\\\\Users\\\\小松\\\\Desktop\\\\photo\")\r\n    val fileSplit: FileSplit = new FileSplit(mainPath, NativeImageLoader.ALLOWED_FORMATS, rng)\r\n    val numExamples: Int = Math.toIntExact(fileSplit.length)\r\n    numLabels = fileSplit.getRootDir.listFiles().length\r\n    val pathFilter: BalancedPathFilter = new BalancedPathFilter(rng, labelMaker, numExamples, numLabels, maxPathsPerLabel)\r\n    val inputSplit: Array[InputSplit] = fileSplit.sample(pathFilter, 1)\r\n    inputSplit(0)\r\n  }","user":"admin","dateUpdated":"2019-05-30T09:19:39+0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"getData: (path: String, labelMaker: org.datavec.api.io.labels.ParentPathLabelGenerator)org.datavec.api.split.InputSplit\n"}]},"apps":[],"jobName":"paragraph_1559119841852_1666733027","id":"20190529-165041_972587473","dateCreated":"2019-05-29T16:50:41+0800","dateStarted":"2019-05-30T09:19:57+0800","dateFinished":"2019-05-30T09:19:58+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:206"},{"text":"    print(\"Load data....\")\r\n\r\n    val labelMaker: ParentPathLabelGenerator = new ParentPathLabelGenerator\r\n\r\n    val trainData:InputSplit = getData(\"/home/datasets/pepperFaceRecognize1/train/\",labelMaker)\r\n    val testData:InputSplit =  getData(\"/home/datasets/pepperFaceRecognize1/test/\",labelMaker)\r\n","user":"admin","dateUpdated":"2019-05-30T09:19:39+0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Load data....labelMaker: org.datavec.api.io.labels.ParentPathLabelGenerator = org.datavec.api.io.labels.ParentPathLabelGenerator@7497bc4d\ntrainData: org.datavec.api.split.InputSplit = org.datavec.api.split.CollectionInputSplit@2da079\ntestData: org.datavec.api.split.InputSplit = org.datavec.api.split.CollectionInputSplit@33cf9d3d\n"}]},"apps":[],"jobName":"paragraph_1559119854642_-100803420","id":"20190529-165054_1393036318","dateCreated":"2019-05-29T16:50:54+0800","dateStarted":"2019-05-30T09:19:57+0800","dateFinished":"2019-05-30T09:19:59+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:207"},{"text":"  def fullyConnected(name: String, out: Int, bias: Double, dropOut: Double, dist: Distribution): DenseLayer = {\r\n    new DenseLayer.Builder().name(name).nOut(out).biasInit(bias).dropOut(dropOut).dist(dist).build\r\n  }\r\n  def conv3x3(name: String, out: Int, bias: Double): ConvolutionLayer = {\r\n    new ConvolutionLayer.Builder(Array[Int](3, 3), Array[Int](1, 1), Array[Int](1, 1)).name(name).nOut(out).biasInit(bias).build\r\n  }\r\n  def maxPool(name: String, kernel: Array[Int]): SubsamplingLayer = {\r\n    new SubsamplingLayer.Builder(kernel, Array[Int](2, 2)).name(name).build\r\n  }\r\n\r\n  def conv5x5(name: String, out: Int, stride: Array[Int], pad: Array[Int], bias: Double): ConvolutionLayer = {\r\n    new ConvolutionLayer.Builder(Array[Int](5, 5), stride, pad).name(name).nOut(out).biasInit(bias).build\r\n  }\r\n\r\n  def convInit(name: String, in: Int, out: Int, kernel: Array[Int], stride: Array[Int], pad: Array[Int], bias: Double): ConvolutionLayer = {\r\n    new ConvolutionLayer.Builder(kernel, stride, pad).name(name).nIn(in).nOut(out).biasInit(bias).build\r\n  }\r\n","user":"admin","dateUpdated":"2019-05-30T09:19:39+0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"fullyConnected: (name: String, out: Int, bias: Double, dropOut: Double, dist: org.deeplearning4j.nn.conf.distribution.Distribution)org.deeplearning4j.nn.conf.layers.DenseLayer\nconv3x3: (name: String, out: Int, bias: Double)org.deeplearning4j.nn.conf.layers.ConvolutionLayer\nmaxPool: (name: String, kernel: Array[Int])org.deeplearning4j.nn.conf.layers.SubsamplingLayer\nconv5x5: (name: String, out: Int, stride: Array[Int], pad: Array[Int], bias: Double)org.deeplearning4j.nn.conf.layers.ConvolutionLayer\nconvInit: (name: String, in: Int, out: Int, kernel: Array[Int], stride: Array[Int], pad: Array[Int], bias: Double)org.deeplearning4j.nn.conf.layers.ConvolutionLayer\n"}]},"apps":[],"jobName":"paragraph_1559119867618_-678849510","id":"20190529-165107_1745352979","dateCreated":"2019-05-29T16:51:07+0800","dateStarted":"2019-05-30T09:19:59+0800","dateFinished":"2019-05-30T09:20:00+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:208"},{"text":"\r\ndef alexnetModel: MultiLayerNetwork = {\r\n    val nonZeroBias: Double = 1\r\n    val dropOut: Double = 0.5\r\n    val conf: MultiLayerConfiguration = new NeuralNetConfiguration.Builder()\r\n      .seed(seed)\r\n      .weightInit(WeightInit.DISTRIBUTION)\r\n      .dist(new NormalDistribution(0.0, 0.01))\r\n      .activation(Activation.RELU)\r\n      .updater(new Nesterovs(new StepSchedule(ScheduleType.ITERATION, 1e-2, 0.1, 100000), 0.9))\r\n      .biasUpdater(new Nesterovs(new StepSchedule(ScheduleType.ITERATION, 2e-2, 0.1, 100000), 0.9))\r\n      .gradientNormalization(GradientNormalization.RenormalizeL2PerLayer)\r\n      .l2(5 * 1e-4)\r\n      .list\r\n      .layer(0, convInit(\"cnn1\", channels, 96, Array[Int](11, 11), Array[Int](4, 4), Array[Int](3, 3), 0))\r\n      .layer(1, new LocalResponseNormalization.Builder().name(\"lrn1\").build)\r\n      .layer(2, maxPool(\"maxpool1\", Array[Int](3, 3)))\r\n      .layer(3, conv5x5(\"cnn2\", 256, Array[Int](1, 1), Array[Int](2, 2), nonZeroBias))\r\n      .layer(4, new LocalResponseNormalization.Builder().name(\"lrn2\").build)\r\n      .layer(5, maxPool(\"maxpool2\", Array[Int](3, 3)))\r\n      .layer(6, conv3x3(\"cnn3\", 384, 0))\r\n      .layer(7, conv3x3(\"cnn4\", 384, nonZeroBias))\r\n      .layer(8, conv3x3(\"cnn5\", 256, nonZeroBias))\r\n      .layer(9, maxPool(\"maxpool3\", Array[Int](3, 3)))\r\n      .layer(10, fullyConnected(\"ffn1\", 4096, nonZeroBias, dropOut, new GaussianDistribution(0, 0.005)))\r\n      .layer(11, fullyConnected(\"ffn2\", 4096, nonZeroBias, dropOut, new GaussianDistribution(0, 0.005)))\r\n      .layer(12, new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)\r\n        .name(\"output\").nOut(numLabels).activation(Activation.SOFTMAX).build)\r\n      .backprop(true).pretrain(false)\r\n      .setInputType(InputType.convolutional(height, width, channels))\r\n      .build\r\n    new MultiLayerNetwork(conf)\r\n  }","user":"admin","dateUpdated":"2019-05-30T09:19:39+0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there were 4 deprecation warning(s); re-run with -deprecation for details\nalexnetModel: org.deeplearning4j.nn.multilayer.MultiLayerNetwork\n"}]},"apps":[],"jobName":"paragraph_1559119877594_1563097655","id":"20190529-165117_544461110","dateCreated":"2019-05-29T16:51:17+0800","dateStarted":"2019-05-30T09:19:59+0800","dateFinished":"2019-05-30T09:20:02+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:209"},{"text":"\r\n print(\"Build model....\")\r\n    var network: MultiLayerNetwork = null\r\n    modelType match {\r\n//      case \"LeNet\" => network=lenetModel\r\n      case \"AlexNet\" => network=alexnetModel\r\n//      case \"custom\" => network=customModel\r\n      case _ =>\r\n        throw new InvalidInputTypeException(\"Incorrect model provided.\")\r\n    }\r\n    network.init\r\n    val uiServer: UIServer = UIServer.getInstance\r\n    val statsStorage: StatsStorage = new InMemoryStatsStorage\r\n    uiServer.attach(statsStorage)\r\n    network.setListeners(new StatsListener(statsStorage), new ScoreIterationListener(1))\r\n\t\r\n    val recordReader: ImageRecordReader = new ImageRecordReader(height, width, channels, labelMaker)\r\n    var dataIter: DataSetIterator = null\r\n\r\n    val scaler: DataNormalization = new ImagePreProcessingScaler(0, 1)\r\n    print(\"Train model....\")\r\n    recordReader.initialize(trainData, null)\r\n    dataIter = new RecordReaderDataSetIterator(recordReader, batchSize, 1, numLabels)\r\n    scaler.fit(dataIter)\r\n    dataIter.setPreProcessor(scaler)\r\n    network.fit(dataIter, epochs)\r\n    val TrainEval: Evaluation = network.evaluate(dataIter)\r\n    print(TrainEval.stats(true))\r\n\t","user":"admin","dateUpdated":"2019-06-05T14:55:47+0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Build model....network: org.deeplearning4j.nn.multilayer.MultiLayerNetwork = null\nuiServer: org.deeplearning4j.ui.api.UIServer = PlayUIServer(server=play.server.Server@7c07fb47, eventQueue=[], listeners=[], statsStorageInstances=[], uiModules=[org.deeplearning4j.ui.module.defaultModule.DefaultModule@37f68e18, org.deeplearning4j.ui.module.train.TrainModule@7842ab40, org.deeplearning4j.ui.module.convolutional.ConvolutionalListenerModule@31e697db, org.deeplearning4j.ui.module.tsne.TsneModule@72789f63, org.deeplearning4j.ui.module.remote.RemoteReceiverModule@717d497a], remoteReceiverModule=org.deeplearning4j.ui.module.remote.RemoteReceiverModule@717d497a, typeIDModuleMap={ConvolutionalListener=[org.deeplearning4j.ui.module.convolutional.ConvolutionalListenerModule@31e697db], StatsListener=[org.deeplearning4j.ui.module.train.TrainModule@7842ab40]}, uiProcessingDelay=500, ...statsStorage: org.deeplearning4j.api.storage.StatsStorage = InMemoryStatsStorage(uid=c3f3c4af)\nrecordReader: org.datavec.image.recordreader.ImageRecordReader = org.datavec.image.recordreader.ImageRecordReader@49ade925\ndataIter: org.nd4j.linalg.dataset.api.iterator.DataSetIterator = null\nscaler: org.nd4j.linalg.dataset.api.preprocessor.DataNormalization = org.nd4j.linalg.dataset.api.preprocessor.ImagePreProcessingScaler@40f18571\nTrain model....dataIter: org.nd4j.linalg.dataset.api.iterator.DataSetIterator = org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator@58a7b0d5\nwarning: there were 1 deprecation warning(s); re-run with -deprecation for details\nTrainEval: org.deeplearning4j.eval.Evaluation = \n\n\n========================Evaluation Metrics========================\n # of classes:    8\n Accuracy:        0.6875\n Precision:       0.7857\t(1 class excluded from average)\n Recall:          0.6875\n F1 Score:        0.7429\t(1 class excluded from average)\nPrecision, recall & F1: macro-averaged (equally weighted avg. of 8 classes)\n\nWarning: 1 class was never predicted by the model and was excluded from average precision\nClasses excluded from average precision: [1]\n\n=========================Confusion Matrix=========================\n 0 1 2 3 4 5 6 7\n-----------------\n 2 0 0 0 0 0 0 0 | 0 = BaiYu\n 0 0 0 0 2 0 0 0 | 1 = DengChunYu\n 0 0 2 0 0 0 0 0 | 2 = GuoJianBo\n 1 0 0 1 0 0 0 0 | 3 = LiJing\n 0 0 0 0 2 0 0 0 | 4 = PuTianjiao\n 0 0 0 1 0 1 0 0 | 5...\n\n========================Evaluation Metrics========================\n # of classes:    8\n Accuracy:        0.6875\n Precision:       0.7857\t(1 class excluded from average)\n Recall:          0.6875\n F1 Score:        0.7429\t(1 class excluded from average)\nPrecision, recall & F1: macro-averaged (equally weighted avg. of 8 classes)\n\n\n=========================Confusion Matrix=========================\n 0 1 2 3 4 5 6 7\n-----------------\n 2 0 0 0 0 0 0 0 | 0 = BaiYu\n 0 0 0 0 2 0 0 0 | 1 = DengChunYu\n 0 0 2 0 0 0 0 0 | 2 = GuoJianBo\n 1 0 0 1 0 0 0 0 | 3 = LiJing\n 0 0 0 0 2 0 0 0 | 4 = PuTianjiao\n 0 0 0 1 0 1 0 0 | 5 = WangJiYe\n 0 0 0 1 0 0 1 0 | 6 = wangfeng\n 0 0 0 0 0 0 0 2 | 7 = xiaoli\n\nConfusion matrix format: Actual (rowClass) predicted as (columnClass) N times\n=================================================================="}]},"apps":[],"jobName":"paragraph_1559119889187_-1864999720","id":"20190529-165129_529365830","dateCreated":"2019-05-29T16:51:29+0800","dateStarted":"2019-05-30T09:20:00+0800","dateFinished":"2019-05-30T09:24:50+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:210"},{"text":"print(\"Save model....\")\nModelSerializer.writeModel(network, \"/var/skil/storage/face.fz1.zip\", true)","user":"admin","dateUpdated":"2019-05-30T09:19:39+0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Save model...."}]},"apps":[],"jobName":"paragraph_1559119930106_-1624654251","id":"20190529-165210_1801596688","dateCreated":"2019-05-29T16:52:10+0800","dateStarted":"2019-05-30T09:24:51+0800","dateFinished":"2019-05-30T09:27:52+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:211"},{"user":"admin","dateUpdated":"2019-05-30T09:19:39+0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1559178325914_509095282","id":"20190530-090525_1236690199","dateCreated":"2019-05-30T09:05:25+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:212"}],"name":"/face/alexNet","id":"2ECQKJ2W1","angularObjects":{"2EAX2656X:existing_process":[],"2E8UQ294M:existing_process":[],"2E9RF38AK:existing_process":[],"2EAKCN5J4:existing_process":[],"2E9FBD2DY:existing_process":[],"2E8B5D8RA:existing_process":[],"2EA6ZGX5N:existing_process":[],"2E9BNSB9P:existing_process":[],"2EATSM71R:existing_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}