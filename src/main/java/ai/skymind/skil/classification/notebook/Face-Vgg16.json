{"paragraphs":[{"text":"\r\nimport org.apache.commons.io.FilenameUtils\r\nimport org.datavec.api.io.filters.BalancedPathFilter\r\nimport org.datavec.api.io.labels.ParentPathLabelGenerator\r\nimport org.datavec.api.split.FileSplit\r\nimport org.datavec.api.split.InputSplit\r\nimport org.datavec.image.loader.NativeImageLoader\r\nimport org.datavec.image.recordreader.ImageRecordReader\r\nimport org.datavec.image.transform.FlipImageTransform\r\nimport org.datavec.image.transform.ImageTransform\r\nimport org.datavec.image.transform.PipelineImageTransform\r\nimport org.datavec.image.transform.WarpImageTransform\r\nimport org.deeplearning4j.api.storage.StatsStorage\r\nimport org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator\r\nimport org.deeplearning4j.eval.Evaluation\r\nimport org.deeplearning4j.nn.conf.GradientNormalization\r\nimport org.deeplearning4j.nn.conf.MultiLayerConfiguration\r\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\r\nimport org.deeplearning4j.nn.conf.distribution.Distribution\r\nimport org.deeplearning4j.nn.conf.distribution.GaussianDistribution\r\nimport org.deeplearning4j.nn.conf.distribution.NormalDistribution\r\nimport org.deeplearning4j.nn.conf.inputs.InputType\r\nimport org.deeplearning4j.nn.conf.inputs.InvalidInputTypeException\r\nimport org.deeplearning4j.nn.conf.layers._\r\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\r\nimport org.deeplearning4j.nn.weights.WeightInit\r\nimport org.deeplearning4j.optimize.listeners.ScoreIterationListener\r\nimport org.deeplearning4j.ui.api.UIServer\r\nimport org.deeplearning4j.ui.stats.StatsListener\r\nimport org.deeplearning4j.ui.storage.InMemoryStatsStorage\r\nimport org.deeplearning4j.util.ModelSerializer\r\nimport org.nd4j.linalg.activations.Activation\r\nimport org.nd4j.linalg.dataset.DataSet\r\nimport org.nd4j.linalg.dataset.api.iterator.DataSetIterator\r\nimport org.nd4j.linalg.dataset.api.preprocessor.DataNormalization\r\nimport org.nd4j.linalg.dataset.api.preprocessor.ImagePreProcessingScaler\r\nimport org.nd4j.linalg.learning.config.Nesterovs\r\nimport org.nd4j.linalg.lossfunctions.LossFunctions\r\nimport org.nd4j.linalg.primitives.Pair\r\nimport org.nd4j.linalg.schedule.ScheduleType\r\nimport org.nd4j.linalg.schedule.StepSchedule\r\nimport org.slf4j.Logger\r\nimport org.slf4j.LoggerFactory\r\nimport java.io.File\r\nimport java.util.Arrays\r\nimport java.util.List\r\nimport java.util.Random\r\nimport java.lang.Math\r\nimport org.deeplearning4j.nn.api.OptimizationAlgorithm\r\nimport io.skymind.zeppelin.utils._\r\nimport io.skymind.modelproviders.history.client.ModelHistoryClient\r\nimport io.skymind.modelproviders.history.model._\r\n\r\n","user":"admin","dateUpdated":"2019-05-30T21:51:00+0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.commons.io.FilenameUtils\nimport org.datavec.api.io.filters.BalancedPathFilter\nimport org.datavec.api.io.labels.ParentPathLabelGenerator\nimport org.datavec.api.split.FileSplit\nimport org.datavec.api.split.InputSplit\nimport org.datavec.image.loader.NativeImageLoader\nimport org.datavec.image.recordreader.ImageRecordReader\nimport org.datavec.image.transform.FlipImageTransform\nimport org.datavec.image.transform.ImageTransform\nimport org.datavec.image.transform.PipelineImageTransform\nimport org.datavec.image.transform.WarpImageTransform\nimport org.deeplearning4j.api.storage.StatsStorage\nimport org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator\nimport org.deeplearning4j.eval.Evaluation\nimport org.deeplearning4j.nn.conf.GradientNormalization\nimport org.deeplearning4j.nn.conf.MultiLayerConfiguration\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\nimport org.deeplearning4j.nn.conf.distribution.Distribution\nimport org.deeplearning4j.nn.conf.distribution.GaussianDistribution\nimport org.deeplearning4j.nn.conf.distribution.NormalDistribution\nimport org.deeplearning4j.nn.conf.inputs.InputType\nimport org.deeplearning4j.nn.conf.inputs.InvalidInputTypeException\nimport org.deeplearning4j.nn.conf.layers._\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\nimport org.deeplearning4j.nn.weights.WeightInit\nimport org.deeplearning4j.optimize.listeners.ScoreIterationListener\nimport org.deeplearning4j.ui.api.UIServer\nimport org.deeplearning4j.ui.stats.StatsListener\nimport org.deeplearning4j.ui.storage.InMemoryStatsStorage\nimport org.deeplearning4j.util.ModelSerializer\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.dataset.DataSet\nimport org.nd4j.linalg.dataset.api.iterator.DataSetIterator\nimport org.nd4j.linalg.dataset.api.preprocessor.DataNormalization\nimport org.nd4j.linalg.dataset.api.preprocessor.ImagePreProcessingScaler\nimport org.nd4j.linalg.learning.config.Nesterovs\nimport org.nd4j.linalg.lossfunctions.LossFunctions\nimport org.nd4j.linalg.primitives.Pair\nimport org.nd4j.linalg.schedule.ScheduleType\nimport org.nd4j.linalg.schedule.StepSchedule\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport java.io.File\nimport java.util.Arrays\nimport java.util.List\nimport java.util.Random\nimport java.lang.Math\nimport org.deeplearning4j.nn.api.OptimizationAlgorithm\nimport io.skymind.zeppelin.utils._\nimport io.skymind.modelproviders.history.client.ModelHistoryClient\nimport io.skymind.modelproviders.history.model._\n"}]},"apps":[],"jobName":"paragraph_1559128163293_-1203665925","id":"20190529-164909_17796759","dateCreated":"2019-05-29T19:09:23+0800","dateStarted":"2019-05-30T21:51:00+0800","dateFinished":"2019-05-30T21:51:06+0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:204"},{"text":"val skilContext = new SkilContext()\nval client = skilContext.client","user":"admin","dateUpdated":"2019-05-30T21:51:00+0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"skilContext: io.skymind.zeppelin.utils.SkilContext = io.skymind.zeppelin.utils.SkilContext@3dce1a11\nclient: io.skymind.modelproviders.history.client.ModelHistoryClient = io.skymind.modelproviders.history.client.ModelHistoryClient@14f889ef\n"}]},"apps":[],"jobName":"paragraph_1559222708835_-398572666","id":"20190530-212508_1385853806","dateCreated":"2019-05-30T21:25:08+0800","dateStarted":"2019-05-30T21:51:00+0800","dateFinished":"2019-05-30T21:51:06+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:205"},{"text":"val height: Int = 100\r\nval width: Int = 100\r\nval channels: Int = 1\r\nval batchSize: Int = 20\r\nval seed: Long = 42\r\nval rng: Random = new Random(seed)\r\nval epochs: Int = 60\r\nval splitTrainTest: Double = 0.8\r\nval save: Boolean = false\r\nval maxPathsPerLabel: Int = 18\r\nval modelType: String = \"AlexNet\"\r\nvar numLabels: Int = 0\r\nval inputShape = Array[Int](1, 224, 224)\r\n","user":"admin","dateUpdated":"2019-05-30T21:51:00+0800","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"},"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"height: Int = 100\nwidth: Int = 100\nchannels: Int = 1\nbatchSize: Int = 20\nseed: Long = 42\nrng: java.util.Random = java.util.Random@4c9f579d\nepochs: Int = 60\nsplitTrainTest: Double = 0.8\nsave: Boolean = false\nmaxPathsPerLabel: Int = 18\nmodelType: String = AlexNet\nnumLabels: Int = 0\ninputShape: Array[Int] = Array(1, 224, 224)\n"}]},"apps":[],"jobName":"paragraph_1559128163294_-1202511679","id":"20190529-174904_1623651295","dateCreated":"2019-05-29T19:09:23+0800","dateStarted":"2019-05-30T21:51:06+0800","dateFinished":"2019-05-30T21:51:09+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:206"},{"text":"  def getData(path: String,labelMaker: ParentPathLabelGenerator):InputSplit = {\r\n    val mainPath: File = new File(path)\r\n    //    val mainPath: File = new File(\"C:\\\\Users\\\\小松\\\\Desktop\\\\photo\")\r\n    val fileSplit: FileSplit = new FileSplit(mainPath, NativeImageLoader.ALLOWED_FORMATS, rng)\r\n    val numExamples: Int = Math.toIntExact(fileSplit.length)\r\n    numLabels = fileSplit.getRootDir.listFiles().length\r\n    val pathFilter: BalancedPathFilter = new BalancedPathFilter(rng, labelMaker, numExamples, numLabels, maxPathsPerLabel)\r\n    val inputSplit: Array[InputSplit] = fileSplit.sample(pathFilter, 1)\r\n    inputSplit(0)\r\n  }","user":"admin","dateUpdated":"2019-05-30T21:51:00+0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"getData: (path: String, labelMaker: org.datavec.api.io.labels.ParentPathLabelGenerator)org.datavec.api.split.InputSplit\n"}]},"apps":[],"jobName":"paragraph_1559128163295_-1202896428","id":"20190529-165041_972587473","dateCreated":"2019-05-29T19:09:23+0800","dateStarted":"2019-05-30T21:51:07+0800","dateFinished":"2019-05-30T21:51:09+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:207"},{"text":"    print(\"Load data....\")\r\n\r\n    val labelMaker: ParentPathLabelGenerator = new ParentPathLabelGenerator\r\n\r\n    val trainData:InputSplit = getData(\"/home/datasets/pepperFaceRecognize1/train/\",labelMaker)\r\n    val testData:InputSplit =  getData(\"/home/datasets/pepperFaceRecognize1/test/\",labelMaker)\r\n","user":"admin","dateUpdated":"2019-05-30T21:51:00+0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Load data....labelMaker: org.datavec.api.io.labels.ParentPathLabelGenerator = org.datavec.api.io.labels.ParentPathLabelGenerator@5641e987\ntrainData: org.datavec.api.split.InputSplit = org.datavec.api.split.CollectionInputSplit@2377e0f8\ntestData: org.datavec.api.split.InputSplit = org.datavec.api.split.CollectionInputSplit@3c08e786\n"}]},"apps":[],"jobName":"paragraph_1559128163295_-1202896428","id":"20190529-165054_1393036318","dateCreated":"2019-05-29T19:09:23+0800","dateStarted":"2019-05-30T21:51:09+0800","dateFinished":"2019-05-30T21:51:10+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:208"},{"text":"\r\ndef vgg16Model: MultiLayerNetwork = {\r\n    val conf: MultiLayerConfiguration = new NeuralNetConfiguration.Builder()\r\n      .seed(seed)\r\n      .weightInit(WeightInit.DISTRIBUTION)\r\n      .dist(new NormalDistribution(0.0, 0.01))\r\n      .activation(Activation.RELU)\r\n      .updater(new Nesterovs(new StepSchedule(ScheduleType.ITERATION, 1e-2, 0.1, 100000), 0.9))\r\n      .biasUpdater(new Nesterovs(new StepSchedule(ScheduleType.ITERATION, 2e-2, 0.1, 100000), 0.9))\r\n      .gradientNormalization(GradientNormalization.RenormalizeL2PerLayer)\r\n      .l2(5 * 1e-4)\r\n      .list()\r\n      // block 1\r\n      .layer(0, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1).padding(1, 1).nIn(channels).nOut(64).build)\r\n      .layer(1, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)\r\n        .padding(1, 1).nOut(64).build())\r\n      .layer(2, new SubsamplingLayer.Builder()\r\n        .poolingType(SubsamplingLayer.PoolingType.MAX).kernelSize(2, 2)\r\n        .stride(2, 2).build())\r\n      // block 2\r\n      .layer(3, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1).padding(1, 1).nOut(128).build)\r\n      .layer(4, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)\r\n        .padding(1, 1).nOut(128).build())\r\n      .layer(5, new SubsamplingLayer.Builder()\r\n        .poolingType(SubsamplingLayer.PoolingType.MAX).kernelSize(2, 2)\r\n        .stride(2, 2).build())\r\n      // block 3\r\n      .layer(6, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1).padding(1, 1).nOut(256).build)\r\n      .layer(7, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)\r\n        .padding(1, 1).nOut(256).build())\r\n      .layer(8, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)\r\n        .padding(1, 1).nOut(256).build())\r\n      .layer(9, new SubsamplingLayer.Builder()\r\n        .poolingType(SubsamplingLayer.PoolingType.MAX).kernelSize(2, 2)\r\n        .stride(2, 2).build())\r\n      // block 4\r\n      .layer(10, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1).padding(1, 1).nOut(512).build)\r\n      .layer(11, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)\r\n        .padding(1, 1).nOut(512).build())\r\n      .layer(12, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)\r\n        .padding(1, 1).nOut(512).build())\r\n      .layer(13, new SubsamplingLayer.Builder()\r\n        .poolingType(SubsamplingLayer.PoolingType.MAX).kernelSize(2, 2)\r\n        .stride(2, 2).build())\r\n      // block 5\r\n      .layer(14, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1).padding(1, 1).nOut(512).build)\r\n      .layer(15, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)\r\n        .padding(1, 1).nOut(512).build())\r\n      .layer(16, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)\r\n        .padding(1, 1).nOut(512).build())\r\n      .layer(17, new SubsamplingLayer.Builder()\r\n        .poolingType(SubsamplingLayer.PoolingType.MAX).kernelSize(2, 2)\r\n        .stride(2, 2).build())\r\n      .layer(18, new OutputLayer.Builder(\r\n        LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).name(\"output\")\r\n        .nOut(numLabels).activation(Activation.SOFTMAX) // radial basis function required\r\n        .build())\r\n      .backprop(true).pretrain(false)\r\n      .setInputType(InputType.convolutional(height, width, channels))\r\n      .build();\r\n    return new MultiLayerNetwork(conf)\r\n  }","user":"admin","dateUpdated":"2019-05-30T21:51:00+0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there were 2 deprecation warning(s); re-run with -deprecation for details\nvgg16Model: org.deeplearning4j.nn.multilayer.MultiLayerNetwork\n"}]},"apps":[],"jobName":"paragraph_1559128163296_-1217132137","id":"20190529-165117_544461110","dateCreated":"2019-05-29T19:09:23+0800","dateStarted":"2019-05-30T21:51:10+0800","dateFinished":"2019-05-30T21:51:12+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:209"},{"text":"\r\n print(\"Build model....\")\r\n    var network: MultiLayerNetwork =vgg16Model\r\n    network.init\r\n    val uiServer: UIServer = UIServer.getInstance\r\n    val statsStorage: StatsStorage = new InMemoryStatsStorage\r\n    uiServer.attach(statsStorage)\r\n    network.setListeners(new StatsListener(statsStorage), new ScoreIterationListener(1))\r\n\t\r\n    val recordReader: ImageRecordReader = new ImageRecordReader(height, width, channels, labelMaker)\r\n    var dataIter: DataSetIterator = null\r\n\r\n    val scaler: DataNormalization = new ImagePreProcessingScaler(0, 1)\r\n    print(\"Train model....\")\r\n    recordReader.initialize(trainData, null)\r\n    dataIter = new RecordReaderDataSetIterator(recordReader, batchSize, 1, numLabels)\r\n    scaler.fit(dataIter)\r\n    dataIter.setPreProcessor(scaler)\r\n    network.fit(dataIter, epochs)\r\n    val TrainEval: Evaluation = network.evaluate(dataIter)\r\n    print(TrainEval.stats(true))\r\n\t","user":"admin","dateUpdated":"2019-05-30T22:08:54+0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Build model....network: org.deeplearning4j.nn.multilayer.MultiLayerNetwork = org.deeplearning4j.nn.multilayer.MultiLayerNetwork@6643e97a\nuiServer: org.deeplearning4j.ui.api.UIServer = PlayUIServer(server=play.server.Server@480b73a, eventQueue=[], listeners=[], statsStorageInstances=[], uiModules=[org.deeplearning4j.ui.module.defaultModule.DefaultModule@22ad3662, org.deeplearning4j.ui.module.train.TrainModule@2b18e9fe, org.deeplearning4j.ui.module.convolutional.ConvolutionalListenerModule@b3951ed, org.deeplearning4j.ui.module.tsne.TsneModule@a811ed7, org.deeplearning4j.ui.module.remote.RemoteReceiverModule@415427c3], remoteReceiverModule=org.deeplearning4j.ui.module.remote.RemoteReceiverModule@415427c3, typeIDModuleMap={ConvolutionalListener=[org.deeplearning4j.ui.module.convolutional.ConvolutionalListenerModule@b3951ed], StatsListener=[org.deeplearning4j.ui.module.train.TrainModule@2b18e9fe]}, uiProcessingDelay=500, shut...statsStorage: org.deeplearning4j.api.storage.StatsStorage = InMemoryStatsStorage(uid=9e94f8b5)\nrecordReader: org.datavec.image.recordreader.ImageRecordReader = org.datavec.image.recordreader.ImageRecordReader@598fab61\ndataIter: org.nd4j.linalg.dataset.api.iterator.DataSetIterator = null\nscaler: org.nd4j.linalg.dataset.api.preprocessor.DataNormalization = org.nd4j.linalg.dataset.api.preprocessor.ImagePreProcessingScaler@40f18571\nTrain model....dataIter: org.nd4j.linalg.dataset.api.iterator.DataSetIterator = org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator@1ea9246b\nwarning: there were 1 deprecation warning(s); re-run with -deprecation for details\nTrainEval: org.deeplearning4j.eval.Evaluation = \n\n\n========================Evaluation Metrics========================\n # of classes:    8\n Accuracy:        0.9375\n Precision:       0.9583\n Recall:          0.9375\n F1 Score:        0.9333\nPrecision, recall & F1: macro-averaged (equally weighted avg. of 8 classes)\n\n\n=========================Confusion Matrix=========================\n 0 1 2 3 4 5 6 7\n-----------------\n 2 0 0 0 0 0 0 0 | 0 = BaiYu\n 0 2 0 0 0 0 0 0 | 1 = DengChunYu\n 0 0 2 0 0 0 0 0 | 2 = GuoJianBo\n 0 0 0 1 0 0 1 0 | 3 = LiJing\n 0 0 0 0 2 0 0 0 | 4 = PuTianjiao\n 0 0 0 0 0 2 0 0 | 5 = WangJiYe\n 0 0 0 0 0 0 2 0 | 6 = wangfeng\n 0 0 0 0 0 0 0 2 | 7 = xiaoli\n\nConfusion matrix format: Actual (rowClass) predicted as (columnClass) N times\n==============================================...\n\n========================Evaluation Metrics========================\n # of classes:    8\n Accuracy:        0.9375\n Precision:       0.9583\n Recall:          0.9375\n F1 Score:        0.9333\nPrecision, recall & F1: macro-averaged (equally weighted avg. of 8 classes)\n\n\n=========================Confusion Matrix=========================\n 0 1 2 3 4 5 6 7\n-----------------\n 2 0 0 0 0 0 0 0 | 0 = BaiYu\n 0 2 0 0 0 0 0 0 | 1 = DengChunYu\n 0 0 2 0 0 0 0 0 | 2 = GuoJianBo\n 0 0 0 1 0 0 1 0 | 3 = LiJing\n 0 0 0 0 2 0 0 0 | 4 = PuTianjiao\n 0 0 0 0 0 2 0 0 | 5 = WangJiYe\n 0 0 0 0 0 0 2 0 | 6 = wangfeng\n 0 0 0 0 0 0 0 2 | 7 = xiaoli\n\nConfusion matrix format: Actual (rowClass) predicted as (columnClass) N times\n=================================================================="}]},"apps":[],"jobName":"paragraph_1559128163296_-1217132137","id":"20190529-165129_529365830","dateCreated":"2019-05-29T19:09:23+0800","dateStarted":"2019-05-30T21:51:11+0800","dateFinished":"2019-05-30T21:56:37+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:210"},{"text":"print(\"Save model....\")\n//ModelSerializer.writeModel(network, \"/var/skil/storage/face.vgg-v1.zip\", true)\nval modelId = skilContext.addModelToExperiment(z, network, \"face recognize model\")\n\nval evalId = skilContext.addEvaluationToModel(z, modelId, TrainEval, \"cnn \" + epochs + \" epochs\")","user":"admin","dateUpdated":"2019-06-04T17:43:42+0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Save model....<console>:28: error: not found: value ModelSerializer\n              ModelSerializer.writeModel(network, \"/var/skil/storage/face.vgg-v1.zip\", true)\n              ^\n"}]},"apps":[],"jobName":"paragraph_1559128163297_-1217516886","id":"20190529-165140_638549926","dateCreated":"2019-05-29T19:09:23+0800","dateStarted":"2019-06-04T17:43:25+0800","dateFinished":"2019-06-04T17:43:25+0800","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:211"},{"user":"admin","dateUpdated":"2019-05-30T21:51:00+0800","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1559128163297_-1217516886","id":"20190529-165210_1801596688","dateCreated":"2019-05-29T19:09:23+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:212"}],"name":"/face/vgg-v1","id":"2EC6BKRR1","angularObjects":{"2EAX2656X:existing_process":[],"2E8UQ294M:existing_process":[],"2E9RF38AK:existing_process":[],"2EAKCN5J4:existing_process":[],"2E9FBD2DY:existing_process":[],"2E8B5D8RA:existing_process":[],"2EA6ZGX5N:existing_process":[],"2E9BNSB9P:existing_process":[],"2EATSM71R:existing_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}